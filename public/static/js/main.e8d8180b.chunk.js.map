{"version":3,"sources":["components/poll/create/PollForm.js","components/poll/view/PollView.js","components/poll/list/PollList.js","App.js","serviceWorker.js","index.js"],"names":["PollForm","React","useState","value","setValue","question","setQuestion","handleChange","index","event","valueCopy","target","className","FormControl","component","FormLabel","TextField","id","label","onChange","FormGroup","aria-label","name","style","padding","map","item","Grid","container","key","spacing","alignItems","Button","variant","color","onClick","push","pop","fetch","method","headers","body","JSON","stringify","then","response","json","data","console","log","catch","error","PollView","pollId","useParams","prompt","options","poll","setPoll","useEffect","newPoll","fetchPoll","RadioGroup","FormControlLabel","control","Radio","PollList","match","useRouteMatch","selected","setSelected","list","setList","newList","filter","length","List","to","url","ListItem","button","ListItemText","primary","path","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e8d8180b.chunk.js","sourcesContent":["import React from 'react';\nimport './../../../App.css';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Grid from '@material-ui/core/Grid';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\n\nfunction PollForm() {\n  const [value, setValue] = React.useState(['Sample']);\n  const [question, setQuestion] = React.useState('Question?');\n\n  const handleChange = (index) => (event) => {\n    let valueCopy = [...value]\n    valueCopy[index] = event.target.value;\n    setValue(valueCopy);\n  };\n\n  const handlePromptChange = (event) => {\n    setQuestion(event.target.value);\n  };\n\n  const handleAddClick = (event) => {\n    let valueCopy = [...value];\n    valueCopy.push(\"Sample\");\n    setValue(valueCopy);\n  };\n\n  const handleRemoveClick = (event) => {\n    let valueCopy = [...value];\n    valueCopy.pop();\n    setValue(valueCopy);\n  };\n\n  const handleSubmitClick = (event) => {\n    fetch(`https://mern-poll.herokuapp.com/polls`, {\n        method: 'POST',\n        headers: {\n            \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            \"prompt\": question,\n            \"options\": value\n        })\n    })\n    .then(function(response) {\n        return response.json();\n    })\n    .then(function(data) {\n        console.log('Request succeeded with JSON response', data);\n    })\n    .catch(function(error) {\n        console.log('Request failed', error);\n    });\n  };\n\n  return (\n    <div className=\"App\">\n    <FormControl component=\"fieldset\">\n    <FormLabel component=\"legend\">{<TextField id=\"prompt\" label={question} onChange={handlePromptChange}/>}</FormLabel>\n      <FormGroup aria-label=\"choices\" name=\"choices\">\n        <div style={{ padding: 20 }}>\n        {value.map((item,index) =>\n          <Grid container key={\"container-\"+index} spacing={1} alignItems=\"flex-end\">\n            <Grid item key={\"grid-icon-\"+index}>\n              <RadioButtonUncheckedIcon key={\"icon-\"+index}/>\n            </Grid>\n            <Grid item key={\"grid-text-field-\"+index}>\n              <TextField id={\"text-field-\"+index} key={\"text-field-\"+index} label={item} onChange={handleChange(index)}/>\n            </Grid>\n          </Grid>\n        )}\n        </div>\n        <Grid container spacing={1} alignItems=\"flex-end\">\n          <Grid item>\n            <Button variant=\"contained\" color=\"primary\" onClick={handleAddClick}>\n            Add\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button variant=\"contained\" color=\"primary\" onClick={handleRemoveClick}>\n            Remove\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button variant=\"contained\" color=\"primary\" onClick={handleSubmitClick}>\n            Save\n            </Button>\n          </Grid>\n        </Grid>\n      </FormGroup>\n    </FormControl>\n    </div>\n  );\n}\n\nexport default PollForm;\n","import React from 'react';\nimport './../../../App.css';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Button from '@material-ui/core/Button';\nimport {\n  useParams\n} from \"react-router-dom\";\n\nfunction PollView() {\n\n  let { pollId } = useParams();\n\n  const [value, setValue] = React.useState(\"Sample\");\n\n  const [poll, setPoll] = React.useState({\n    id:\"default\",\n    prompt:\"Question?\",\n    options:[\"Sample\"]\n  });\n\n  const handleChange = (event) => {\n    setValue(event.target.value);\n  };\n\n  const fetchPoll = (pollId) => {\n    console.log(\"PollID: \",pollId);\n    fetch(`https://mern-poll.herokuapp.com/polls/${pollId}`, {\n        method: 'GET',\n        headers: {\n            \"Content-type\": \"application/json\"\n        }\n    })\n    .then(function(response) {\n        return response.json();\n    })\n    .then(function(data) {\n        console.log('Request succeeded with JSON response Poll', data);\n        let newPoll = {\n          id:data.id,\n          prompt:data.prompt,\n          options:data.options\n        };\n        setPoll(newPoll);\n        setValue(newPoll.options[0]);\n    })\n    .catch(function(error) {\n        console.log('Request failed', error);\n    });\n  };\n\n  const handleSubmitClick = (event) => {\n    fetch(`https://mern-poll.herokuapp.com/pollResults`, {\n        method: 'POST',\n        headers: {\n            \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            \"pollId\": pollId,\n            \"response\": value\n        })\n    })\n    .then(function(response) {\n        return response.json();\n    })\n    .then(function(data) {\n        console.log('Request succeeded with JSON response', data);\n    })\n    .catch(function(error) {\n        console.log('Request failed', error);\n    });\n  };\n\n  React.useEffect(() => {\n      fetchPoll(pollId);\n  },[pollId]);\n\n  return (\n    <div className=\"App\">\n    <FormControl component=\"fieldset\">\n    <FormLabel component=\"legend\">{poll.prompt}</FormLabel>\n      <RadioGroup aria-label=\"prompt\" name=\"prompt\" value={value} onChange={handleChange}>\n        {poll.options.map((item,index) =>\n          <FormControlLabel key={\"option-\"+index} value={item} control={<Radio />} label={item} />\n        )}\n        <Button variant=\"contained\" color=\"primary\" onClick={handleSubmitClick}>\n          Save\n        </Button>\n      </RadioGroup>\n    </FormControl>\n    </div>\n  );\n}\n\nexport default PollView;\n","import React from 'react';\nimport './../../../App.css';\nimport PollView from './../view/PollView.js';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch\n} from \"react-router-dom\";\n\nfunction PollList() {\n\n  let match = useRouteMatch();\n  \n  const [selected, setSelected] = React.useState(false);\n\n  const [list, setList] = React.useState(['Sample']);\n\n  const handleChange = (event) => {\n    setSelected(true);\n  }\n\n  const fetchPolls = () => {\n    fetch(`https://mern-poll.herokuapp.com/polls?limit=100`, {\n        method: 'GET',\n        headers: {\n            \"Content-type\": \"application/json\"\n        }\n    })\n    .then(function(response) {\n        return response.json();\n    })\n    .then(function(data) {\n        console.log('Request succeeded with JSON response', data);\n        let newList = data\n        .filter(poll => 'prompt' in poll && \n          'options' in poll && poll.options.length > 0);\n\n        setList(newList);\n    })\n    .catch(function(error) {\n        console.log('Request failed', error);\n    });\n  };\n\n  React.useEffect(() => {\n    fetchPolls();\n  },[]);\n \n  return (\n    <Router>\n    <div className=\"App\">\n    {(!selected) &&\n    <List component=\"nav\" aria-label=\"polls\">\n      {list.map((item,index) =>\n        <Link to={`${match.url}/view/${item.id}`}>\n          <ListItem key={\"item:\"+index} button onClick={handleChange}>\n            <ListItemText key={\"label:\"+index} primary={item.prompt}/>\n          </ListItem>\n        </Link>\n      )}\n    </List>}\n    <Switch>\n      <Route path={`${match.url}/view/:pollId`}>\n        <PollView/>\n      </Route>\n    </Switch>\n    </div>\n    </Router>\n  );\n}\n\nexport default PollList;\n","import React from 'react';\nimport './App.css';\nimport PollForm from './components/poll/create/PollForm.js';\nimport PollList from './components/poll/list/PollList.js';\nimport PollView from './components/poll/view/PollView.js';\nimport Button from '@material-ui/core/Button';\nimport AddIcon from '@material-ui/icons/Add';\nimport CreateIcon from '@material-ui/icons/Create';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\n\nfunction App() {\n  \n  return (\n    <Router>\n      <div style={{padding: 20 }}>\n        <Button variant=\"contained\" color=\"primary\" style={{\"margin\": \"10px\" }}>\n        <Link to=\"/create\" style={{ color: \"white\" }}><AddIcon/></Link>\n        </Button>\n        <Button variant=\"contained\" color=\"primary\" style={{\"margin\": \"10px\" }}>\n        <Link to=\"/list\" style={{ color: \"white\" }}><CreateIcon/></Link>\n        </Button>\n        <Button variant=\"contained\" color=\"primary\" style={{\"margin\": \"10px\" }}>\n        <Link to=\"/results\" style={{ color: \"white\" }}><VisibilityIcon/></Link>\n        </Button>\n        <Switch>\n          <Route path=\"/create\">\n            <PollForm/>\n          </Route>\n          <Route path=\"/list\">\n            <PollList/>\n          </Route>\n          <Route path=\"/view/:pollId\">\n            <PollView/>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}