{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","useState","value","setValue","question","setQuestion","handleChange","index","event","valueCopy","target","className","FormControl","component","FormLabel","TextField","id","label","onChange","FormGroup","aria-label","name","style","padding","map","item","Grid","container","spacing","alignItems","Button","variant","color","onClick","push","pop","fetch","method","headers","body","JSON","stringify","then","response","json","data","console","log","catch","error","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wUAkGeA,MAxFf,WAAgB,IAAD,EACaC,IAAMC,SAAS,CAAC,WAD7B,mBACNC,EADM,KACCC,EADD,OAEmBH,IAAMC,SAAS,aAFlC,mBAENG,EAFM,KAEIC,EAFJ,KAIPC,EAAe,SAACC,GAAD,OAAW,SAACC,GAC/B,IAAIC,EAAS,YAAOP,GACpBO,EAAUF,GAASC,EAAME,OAAOR,MAChCC,EAASM,KAyCX,OACE,yBAAKE,UAAU,OACf,kBAACC,EAAA,EAAD,CAAaC,UAAU,YACvB,kBAACC,EAAA,EAAD,CAAWD,UAAU,UAAU,kBAACE,EAAA,EAAD,CAAWC,GAAG,SAASC,MAAOb,EAAUc,SAzC9C,SAACV,GAC1BH,EAAYG,EAAME,OAAOR,WAyCvB,kBAACiB,EAAA,EAAD,CAAWC,aAAW,UAAUC,KAAK,WACnC,yBAAKC,MAAO,CAAEC,QAAS,KACtBrB,EAAMsB,KAAI,SAACC,EAAKlB,GAAN,OACT,kBAACmB,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,WAAW,YACrC,kBAACH,EAAA,EAAD,CAAMD,MAAI,GACR,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAMD,MAAI,GACR,kBAACV,EAAA,EAAD,CAAWC,GAAI,UAAUT,EAAOU,MAAOQ,EAAMP,SAAUZ,EAAaC,WAK1E,kBAACmB,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,WAAW,YACrC,kBAACH,EAAA,EAAD,CAAMD,MAAI,GACR,kBAACK,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QArD/B,SAACzB,GACtB,IAAIC,EAAS,YAAOP,GACpBO,EAAUyB,KAAK,UACf/B,EAASM,KAkDD,QAIF,kBAACiB,EAAA,EAAD,CAAMD,MAAI,GACR,kBAACK,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QApD5B,SAACzB,GACzB,IAAIC,EAAS,YAAOP,GACpBO,EAAU0B,MACVhC,EAASM,KAiDD,WAIF,kBAACiB,EAAA,EAAD,CAAMD,MAAI,GACR,kBAACK,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAnD5B,SAACzB,GACzB4B,MAAM,wCAAyC,CAC3CC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjB,OAAUrC,EACV,QAAWF,MAGlBwC,MAAK,SAASC,GACX,OAAOA,EAASC,UAEnBF,MAAK,SAASG,GACXC,QAAQC,IAAI,uCAAwCF,MAEvDG,OAAM,SAASC,GACZH,QAAQC,IAAI,iBAAkBE,QAiC1B,cC3EQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdhB,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAMgB,c","file":"static/js/main.e930bb1b.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Grid from '@material-ui/core/Grid';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\n\nfunction App() {\n  const [value, setValue] = React.useState(['Sample']);\n  const [question, setQuestion] = React.useState('Question?');\n\n  const handleChange = (index) => (event) => {\n    let valueCopy = [...value]\n    valueCopy[index] = event.target.value;\n    setValue(valueCopy);\n  };\n\n  const handlePromptChange = (event) => {\n    setQuestion(event.target.value);\n  };\n\n  const handleAddClick = (event) => {\n    let valueCopy = [...value];\n    valueCopy.push(\"Sample\");\n    setValue(valueCopy);\n  };\n\n  const handleRemoveClick = (event) => {\n    let valueCopy = [...value];\n    valueCopy.pop();\n    setValue(valueCopy);\n  };\n\n  const handleSubmitClick = (event) => {\n    fetch(`https://mern-poll.herokuapp.com/polls`, {\n        method: 'POST',\n        headers: {\n            \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            \"prompt\": question,\n            \"options\": value\n        })\n    })\n    .then(function(response) {\n        return response.json();\n    })\n    .then(function(data) {\n        console.log('Request succeeded with JSON response', data);\n    })\n    .catch(function(error) {\n        console.log('Request failed', error);\n    });\n  };\n\n  return (\n    <div className=\"App\">\n    <FormControl component=\"fieldset\">\n    <FormLabel component=\"legend\">{<TextField id=\"prompt\" label={question} onChange={handlePromptChange}/>}</FormLabel>\n      <FormGroup aria-label=\"choices\" name=\"choices\">\n        <div style={{ padding: 20 }}>\n        {value.map((item,index) =>\n          <Grid container spacing={1} alignItems=\"flex-end\">\n            <Grid item>\n              <RadioButtonUncheckedIcon />\n            </Grid>\n            <Grid item>\n              <TextField id={\"option-\"+index} label={item} onChange={handleChange(index)}/>\n            </Grid>\n          </Grid>\n        )}\n        </div>\n        <Grid container spacing={1} alignItems=\"flex-end\">\n          <Grid item>\n            <Button variant=\"contained\" color=\"primary\" onClick={handleAddClick}>\n            Add\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button variant=\"contained\" color=\"primary\" onClick={handleRemoveClick}>\n            Remove\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button variant=\"contained\" color=\"primary\" onClick={handleSubmitClick}>\n            Save\n            </Button>\n          </Grid>\n        </Grid>\n      </FormGroup>\n    </FormControl>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}